import csv
import os

# Read input.csv
def parse_input_csv(file_path):
    with open(file_path, "r") as csv_file:
        reader = csv.reader(csv_file)
        headers = next(reader)  # First row contains table names
        columns = list(reader)  # Remaining rows contain columns
    table_data = {table: [row[i] for row in columns if row[i]] for i, table in enumerate(headers)}
    return table_data

# Replace placeholders in templates
def replace_placeholders(template_content, replacements):
    for placeholder, value in replacements.items():
        template_content = template_content.replace(placeholder, value)
    return template_content

# Write generated content to a file
def write_to_file(output_path, content, append=False):
    mode = "a" if append else "w"
    with open(output_path, mode) as file:
        file.write(content + "\n")

# Generate files for each table
def generate_files(input_csv, output_dir, templates_dir):
    table_data = parse_input_csv(input_csv)
    
    for table_name, columns in table_data.items():
        column_list = ",".join(columns)
        column_list_avro = ",\n".join(
            [
                f'{{"name": "{col}", "type": ["null", "string"], "default": null, "columnName": "{col}", "sqlType": "12"}}'
                for col in columns
            ]
        )

        # Generate SQL File
        sql_template_path = os.path.join(templates_dir, "sql_temp.sql")
        with open(sql_template_path, "r") as file:
            sql_template = file.read()
        sql_content = replace_placeholders(sql_template, {"$columns": column_list})
        write_to_file(os.path.join(output_dir, f"{table_name}_Validation.sql"), sql_content)

        # Generate HQL File
        hql_template_path = os.path.join(templates_dir, "hql_temp.hql")
        with open(hql_template_path, "r") as file:
            hql_template = file.read()
        hql_content = replace_placeholders(hql_template, {"$columns": column_list})
        write_to_file(os.path.join(output_dir, f"{table_name}.hql"), hql_content)

        # Generate AVRO File
        avro_template_path = os.path.join(templates_dir, "avro_temp.avsc")
        with open(avro_template_path, "r") as file:
            avro_template = file.read()
        avro_content = replace_placeholders(avro_template, {"$columns_avro": column_list_avro})
        write_to_file(os.path.join(output_dir, f"{table_name}.avsc"), avro_content)

        # Append to Job.conf
        job_template_path = os.path.join(templates_dir, "job_temp.conf")
        with open(job_template_path, "r") as file:
            job_template = file.read()
        job_content = replace_placeholders(
            job_template,
            {"$table_name": table_name, "$columns": column_list},
        )
        write_to_file(os.path.join(output_dir, "job.conf"), job_content, append=True)

        # Append to Platform_conf.json
        platform_template_path = os.path.join(templates_dir, "platform_temp.json")
        with open(platform_template_path, "r") as file:
            platform_template = file.read()
        platform_content = replace_placeholders(platform_template, {"$table_name": table_name})
        write_to_file(os.path.join(output_dir, "platform_conf.json"), platform_content, append=True)

    print("Files generated successfully!")

# Main execution
input_csv_path = "