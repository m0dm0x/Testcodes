import os
from string import Template

# Function to append data to a configuration file
def append_to_file(template_path, output_path, replacements):
    """Appends data to the configuration file using a template."""
    with open(template_path, 'r') as template_file:
        template_content = Template(template_file.read())  # Use Template for placeholders
        final_content = template_content.safe_substitute(replacements)  # Replace placeholders
    
    with open(output_path, 'a') as output_file:  # Open in append mode
        output_file.write(final_content + '\n')  # Add newline after each entry

# Main function to handle file generation
def create_files(tab_name, columns):
    """Generates files for SQL, HQL, AVRO, and appends to jobs.conf and platform_conf.json."""
    output_dir = os.path.join("C:\\Users\\sxp910\\Desktop\\tables\\Ingestion", tab_name)
    os.makedirs(output_dir, exist_ok=True)

    # Prepare replacements
    columns_sql = ",\n".join(columns)
    columns_hql = ",\n".join([f"{col} string" for col in columns])
    columns_avro = ",\n".join(
        [f'{{ "name": "{col}", "type": ["null", "string"], "default": null }}' for col in columns]
    )

    replacements = {
        "table_name": tab_name,
        "columns": columns_sql,
        "columns_hql": columns_hql,
        "columns_avro": columns_avro,
    }

    # Template paths
    templates = {
        "sql": "templates/sql_temp.sql",
        "hql": "templates/hql_temp.hql",
        "avro": "templates/avro_temp.avsc",
        "jobs": "templates/jobs_temp.conf",
        "platform": "templates/platform_temp.json"
    }

    # Output paths
    outputs = {
        "sql": os.path.join(output_dir, f"{tab_name}_Validation.sql"),
        "hql": os.path.join(output_dir, f"{tab_name}.hql"),
        "avro": os.path.join(output_dir, f"{tab_name}.avsc"),
        "jobs": "C:\\Users\\sxp910\\Desktop\\tables\\Ingestion\\jobs.conf",  # Append globally
        "platform": "C:\\Users\\sxp910\\Desktop\\tables\\Ingestion\\platform_conf.json"  # Append globally
    }

    # Generate individual files
    for file_type in ["sql", "hql", "avro"]:
        if os.path.exists(templates[file_type]):
            with open(templates[file_type], 'r') as template_file:
                content = Template(template_file.read()).safe_substitute(replacements)
            with open(outputs[file_type], 'w') as output_file:
                output_file.write(content)

    # Append to jobs.conf
    append_to_file(templates["jobs"], outputs["jobs"], replacements)

    # Append to platform_conf.json
    append_to_file(templates["platform"], outputs["platform"], replacements)

    print(f"Files for table {tab_name} have been generated and appended successfully!")

# Read input and process multiple tables
with open("input.txt", 'r') as input_file:
    for line in input_file:
        tab_name = line.strip()  # Assuming one table name per line
        columns = ["id", "name", "age"]  # Replace with actual column parsing logic
        create_files(tab_name, columns)