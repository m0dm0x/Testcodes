from pyspark.sql import SparkSession
from pyspark.sql.functions import broadcast
from pyspark.storagelevel import StorageLevel
from pyspark.errors import PySparkRuntimeError
from edh_ingestion_modules.models.task import Task
from edh_ingestion_modules.models.task_status import TaskStatus
from edh_ingestion_modules.utilities.exceptions import TransformationFailedError


class TransformationTask(Task):
    """
    A task to transform data using SQL queries, optimized with Spark plans and persistence.

    Configuration:
    - taskId: TransformationTask
    - inputDataFrame: Comma-separated list of input DataFrame IDs (e.g., "df1,df2").
    - delimiter: Delimiter for separating input DataFrame IDs (default: ",").
    - sqlFile: Path to the SQL file containing transformation logic.
    - outputDataFrame: ID to save the transformed DataFrame.
    - continueOnMissing: Flag to determine whether to proceed if the input DataFrame is missing (default: False).
    """

    def __init__(self, task_config: dict):
        self.task_config = task_config
        self.task_id = task_config.get("taskId")

    def execute(self):
        spark = self.spark_instance
        logger = self.logger_instance
        snapshots = self.snapshot_instance

        try:
            # Extract configurations
            input_dataframes = self.task_config.get("inputDataFrame")
            output_dataframe = self.task_config.get("outputDataFrame")
            sql_file = self.task_config.get("sqlFile")
            delimiter = self.task_config.get("delimiter", ",")  # Default delimiter is ","
            continue_on_missing = self.task_config.get("continueOnMissing", False)

            logger.info(f"Starting TransformationTask with taskId: {self.task_id}")
            logger.info(f"Input DataFrames: {input_dataframes}")
            logger.info(f"Delimiter: {delimiter}")
            logger.info(f"SQL File Path: {sql_file}")
            logger.info(f"Output DataFrame: {output_dataframe}")
            logger.info(f"Continue On Missing: {continue_on_missing}")

            # Split the input DataFrame IDs using the delimiter
            input_dataframe_ids = input_dataframes.split(delimiter)

            # Check if all required input DataFrames exist
            all_exist = all(snapshots.get_snapshot(df_id) for df_id in input_dataframe_ids)
            if not all_exist and not continue_on_missing:
                raise TransformationFailedError(
                    f"One or more required DataFrames are missing and continueOnMissing is False."
                )

            # Create temporary views for all available input DataFrames
            for df_id in input_dataframe_ids:
                input_df = snapshots.get_snapshot(df_id)
                if input_df:
                    logger.info(f"Creating temporary view for DataFrame: {df_id}")
                    input_df.createOrReplaceTempView(df_id)
                elif continue_on_missing:
                    logger.warning(f"Skipping missing DataFrame: {df_id}")

            # Read the SQL file
            with open(sql_file, "r") as file:
                sql_query = file.read()

            logger.info("Executing SQL Query...")
            transformed_df = spark.sql(sql_query)

            # Persist the transformed DataFrame
            transformed_df.persist(StorageLevel.MEMORY_AND_DISK)
            transformed_df.count()  # Trigger an action to persist the DataFrame
            logger.info("Transformed DataFrame persisted successfully.")

            # Add the transformed DataFrame to snapshots
            snapshots.add_snapshot(output_dataframe, transformed_df)
            logger.info(f"Transformation completed successfully. Output saved as: {output_dataframe}")

            return TaskStatus.SUCCESS, None

        except PySparkRuntimeError as e:
            logger.error(f"PySpark Runtime Error: {str(e)}")
            return TaskStatus.FAILED, e

        except TransformationFailedError as e:
            logger.error(f"Transformation Failed Error: {str(e)}")
            return TaskStatus.FAILED, e

        except Exception as e:
            logger.error(f"Unexpected Error: {str(e)}")
            return TaskStatus.FAILED, e