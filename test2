from pyspark.sql import SparkSession
from pyspark.sql.functions import broadcast
from pyspark.storagelevel import StorageLevel
from pyspark.errors import PySparkRuntimeError
from edh_ingestion_modules.models.task import Task
from edh_ingestion_modules.models.task_status import TaskStatus
from edh_ingestion_modules.utilities.exceptions import TransformationFailedError
from gcs_read_write import GCSReadWrite


class TransformationTask(Task):
    def __init__(self, task_config: dict):
        self.task_config = task_config
        self.task_id = task_config.get("taskId")
        self.gcs_reader = GCSReadWrite(task_config)

    def validate_and_create_views(self, snapshots, input_dataframe_ids, continue_on_missing, logger):
        """
        Validate the availability of input DataFrames and create views for existing ones.

        Args:
            snapshots: Snapshot instance for retrieving DataFrames.
            input_dataframe_ids (list): List of input DataFrame IDs.
            continue_on_missing (bool): Whether to continue if a DataFrame is missing.
            logger: Logger instance for logging messages.

        Returns:
            list: List of valid DataFrame IDs that have been successfully loaded.
        """
        available_dataframes = []
        for df_id in input_dataframe_ids:
            input_df = snapshots.get_snapshot(df_id)
            if input_df:
                logger.info(f"Creating temporary view for DataFrame: {df_id}")
                input_df.createOrReplaceTempView(df_id)
                available_dataframes.append(df_id)
            else:
                logger.warning(f"DataFrame '{df_id}' is missing.")
        
        if not available_dataframes:
            raise TransformationFailedError("No available DataFrames found.")
        
        if len(available_dataframes) < len(input_dataframe_ids) and not continue_on_missing:
            raise TransformationFailedError("One or more required DataFrames are missing and continueOnMissing is False.")
        
        return available_dataframes

    def execute(self):
        """
        Execute the transformation task with refined continueOnMissing logic.

        Returns:
            tuple: TaskStatus (SUCCESS/FAILED) and an optional exception.
        """
        spark = self.spark_instance
        logger = self.logger_instance
        snapshots = self.snapshot_instance

        try:
            input_dataframes = self.task_config.get("inputDataFrame")
            output_dataframe = self.task_config.get("outputDataFrame")
            sql_file_path = self.task_config.get("sqlFile")
            delimiter = self.task_config.get("delimiter", ",")
            continue_on_missing = self.task_config.get("continueOnMissing", False)

            logger.info(f"Starting TransformationTask with taskId: {self.task_id}")

            input_dataframe_ids = input_dataframes.split(delimiter)

            # Step 1: Validate input DataFrames and create views for available ones
            available_dataframes = self.validate_and_create_views(
                snapshots, input_dataframe_ids, continue_on_missing, logger
            )

            logger.info(f"Proceeding with available DataFrames: {available_dataframes}")

            # Step 2: Read SQL query
            sql_query = self.gcs_reader.read(sql_file_path)

            # Step 3: Execute the SQL query
            logger.info("Executing SQL Query...")
            transformed_df = spark.sql(sql_query)

            if transformed_df.rdd.isEmpty():
                logger.warning("The SQL query result is empty. Skipping persistence.")
                return TaskStatus.SUCCESS, None

            # Step 4: Persist the transformed DataFrame
            transformed_df.persist(StorageLevel.MEMORY_AND_DISK)
            transformed_df.count()
            logger.info("Transformed DataFrame persisted successfully.")

            # Step 5: Add the transformed DataFrame to snapshots
            snapshots.add_snapshot(output_dataframe, transformed_df)
            logger.info(f"Transformation completed successfully. Output saved as: {output_dataframe}")

            return TaskStatus.SUCCESS, None

        except PySparkRuntimeError as e:
            logger.error(f"PySpark Runtime Error: {str(e)}")
            return TaskStatus.FAILED, e

        except TransformationFailedError as e:
            logger.error(f"Transformation Failed Error: {str(e)}")
            return TaskStatus.FAILED, e

        except Exception as e:
            logger.error(f"Unexpected Error: {str(e)}")
            return TaskStatus.FAILED, e